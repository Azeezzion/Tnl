// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package codespace

import (
	"context"
	"sync"

	"github.com/cli/cli/v2/pkg/liveshare"
	"golang.org/x/crypto/ssh"
)

// liveshareSessionMock is a mock implementation of liveshareSession.
//
// 	func TestSomethingThatUsesliveshareSession(t *testing.T) {
//
// 		// make and configure a mocked liveshareSession
// 		mockedliveshareSession := &liveshareSessionMock{
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			GetSharedServersFunc: func(contextMoqParam context.Context) ([]*liveshare.Port, error) {
// 				panic("mock out the GetSharedServers method")
// 			},
// 			KeepAliveFunc: func(s string)  {
// 				panic("mock out the KeepAlive method")
// 			},
// 			OpenStreamingChannelFunc: func(contextMoqParam context.Context, channelID liveshare.ChannelID) (ssh.Channel, error) {
// 				panic("mock out the OpenStreamingChannel method")
// 			},
// 			StartJupyterServerFunc: func(contextMoqParam context.Context) (int, string, error) {
// 				panic("mock out the StartJupyterServer method")
// 			},
// 			StartSSHServerFunc: func(contextMoqParam context.Context) (int, string, error) {
// 				panic("mock out the StartSSHServer method")
// 			},
// 			StartSharingFunc: func(contextMoqParam context.Context, s string, n int) (liveshare.ChannelID, error) {
// 				panic("mock out the StartSharing method")
// 			},
// 		}
//
// 		// use mockedliveshareSession in code that requires liveshareSession
// 		// and then make assertions.
//
// 	}
type liveshareSessionMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetSharedServersFunc mocks the GetSharedServers method.
	GetSharedServersFunc func(contextMoqParam context.Context) ([]*liveshare.Port, error)

	// KeepAliveFunc mocks the KeepAlive method.
	KeepAliveFunc func(s string)

	// OpenStreamingChannelFunc mocks the OpenStreamingChannel method.
	OpenStreamingChannelFunc func(contextMoqParam context.Context, channelID liveshare.ChannelID) (ssh.Channel, error)

	// StartJupyterServerFunc mocks the StartJupyterServer method.
	StartJupyterServerFunc func(contextMoqParam context.Context) (int, string, error)

	// StartSSHServerFunc mocks the StartSSHServer method.
	StartSSHServerFunc func(contextMoqParam context.Context) (int, string, error)

	// StartSharingFunc mocks the StartSharing method.
	StartSharingFunc func(contextMoqParam context.Context, s string, n int) (liveshare.ChannelID, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetSharedServers holds details about calls to the GetSharedServers method.
		GetSharedServers []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// KeepAlive holds details about calls to the KeepAlive method.
		KeepAlive []struct {
			// S is the s argument value.
			S string
		}
		// OpenStreamingChannel holds details about calls to the OpenStreamingChannel method.
		OpenStreamingChannel []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// ChannelID is the channelID argument value.
			ChannelID liveshare.ChannelID
		}
		// StartJupyterServer holds details about calls to the StartJupyterServer method.
		StartJupyterServer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// StartSSHServer holds details about calls to the StartSSHServer method.
		StartSSHServer []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// StartSharing holds details about calls to the StartSharing method.
		StartSharing []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// N is the n argument value.
			N int
		}
	}
	lockClose                sync.RWMutex
	lockGetSharedServers     sync.RWMutex
	lockKeepAlive            sync.RWMutex
	lockOpenStreamingChannel sync.RWMutex
	lockStartJupyterServer   sync.RWMutex
	lockStartSSHServer       sync.RWMutex
	lockStartSharing         sync.RWMutex
}

// Close calls CloseFunc.
func (mock *liveshareSessionMock) Close() error {
	if mock.CloseFunc == nil {
		panic("liveshareSessionMock.CloseFunc: method is nil but liveshareSession.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedliveshareSession.CloseCalls())
func (mock *liveshareSessionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetSharedServers calls GetSharedServersFunc.
func (mock *liveshareSessionMock) GetSharedServers(contextMoqParam context.Context) ([]*liveshare.Port, error) {
	if mock.GetSharedServersFunc == nil {
		panic("liveshareSessionMock.GetSharedServersFunc: method is nil but liveshareSession.GetSharedServers was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetSharedServers.Lock()
	mock.calls.GetSharedServers = append(mock.calls.GetSharedServers, callInfo)
	mock.lockGetSharedServers.Unlock()
	return mock.GetSharedServersFunc(contextMoqParam)
}

// GetSharedServersCalls gets all the calls that were made to GetSharedServers.
// Check the length with:
//     len(mockedliveshareSession.GetSharedServersCalls())
func (mock *liveshareSessionMock) GetSharedServersCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetSharedServers.RLock()
	calls = mock.calls.GetSharedServers
	mock.lockGetSharedServers.RUnlock()
	return calls
}

// KeepAlive calls KeepAliveFunc.
func (mock *liveshareSessionMock) KeepAlive(s string) {
	if mock.KeepAliveFunc == nil {
		panic("liveshareSessionMock.KeepAliveFunc: method is nil but liveshareSession.KeepAlive was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockKeepAlive.Lock()
	mock.calls.KeepAlive = append(mock.calls.KeepAlive, callInfo)
	mock.lockKeepAlive.Unlock()
	mock.KeepAliveFunc(s)
}

// KeepAliveCalls gets all the calls that were made to KeepAlive.
// Check the length with:
//     len(mockedliveshareSession.KeepAliveCalls())
func (mock *liveshareSessionMock) KeepAliveCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockKeepAlive.RLock()
	calls = mock.calls.KeepAlive
	mock.lockKeepAlive.RUnlock()
	return calls
}

// OpenStreamingChannel calls OpenStreamingChannelFunc.
func (mock *liveshareSessionMock) OpenStreamingChannel(contextMoqParam context.Context, channelID liveshare.ChannelID) (ssh.Channel, error) {
	if mock.OpenStreamingChannelFunc == nil {
		panic("liveshareSessionMock.OpenStreamingChannelFunc: method is nil but liveshareSession.OpenStreamingChannel was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		ChannelID       liveshare.ChannelID
	}{
		ContextMoqParam: contextMoqParam,
		ChannelID:       channelID,
	}
	mock.lockOpenStreamingChannel.Lock()
	mock.calls.OpenStreamingChannel = append(mock.calls.OpenStreamingChannel, callInfo)
	mock.lockOpenStreamingChannel.Unlock()
	return mock.OpenStreamingChannelFunc(contextMoqParam, channelID)
}

// OpenStreamingChannelCalls gets all the calls that were made to OpenStreamingChannel.
// Check the length with:
//     len(mockedliveshareSession.OpenStreamingChannelCalls())
func (mock *liveshareSessionMock) OpenStreamingChannelCalls() []struct {
	ContextMoqParam context.Context
	ChannelID       liveshare.ChannelID
} {
	var calls []struct {
		ContextMoqParam context.Context
		ChannelID       liveshare.ChannelID
	}
	mock.lockOpenStreamingChannel.RLock()
	calls = mock.calls.OpenStreamingChannel
	mock.lockOpenStreamingChannel.RUnlock()
	return calls
}

// StartJupyterServer calls StartJupyterServerFunc.
func (mock *liveshareSessionMock) StartJupyterServer(contextMoqParam context.Context) (int, string, error) {
	if mock.StartJupyterServerFunc == nil {
		panic("liveshareSessionMock.StartJupyterServerFunc: method is nil but liveshareSession.StartJupyterServer was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStartJupyterServer.Lock()
	mock.calls.StartJupyterServer = append(mock.calls.StartJupyterServer, callInfo)
	mock.lockStartJupyterServer.Unlock()
	return mock.StartJupyterServerFunc(contextMoqParam)
}

// StartJupyterServerCalls gets all the calls that were made to StartJupyterServer.
// Check the length with:
//     len(mockedliveshareSession.StartJupyterServerCalls())
func (mock *liveshareSessionMock) StartJupyterServerCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStartJupyterServer.RLock()
	calls = mock.calls.StartJupyterServer
	mock.lockStartJupyterServer.RUnlock()
	return calls
}

// StartSSHServer calls StartSSHServerFunc.
func (mock *liveshareSessionMock) StartSSHServer(contextMoqParam context.Context) (int, string, error) {
	if mock.StartSSHServerFunc == nil {
		panic("liveshareSessionMock.StartSSHServerFunc: method is nil but liveshareSession.StartSSHServer was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStartSSHServer.Lock()
	mock.calls.StartSSHServer = append(mock.calls.StartSSHServer, callInfo)
	mock.lockStartSSHServer.Unlock()
	return mock.StartSSHServerFunc(contextMoqParam)
}

// StartSSHServerCalls gets all the calls that were made to StartSSHServer.
// Check the length with:
//     len(mockedliveshareSession.StartSSHServerCalls())
func (mock *liveshareSessionMock) StartSSHServerCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStartSSHServer.RLock()
	calls = mock.calls.StartSSHServer
	mock.lockStartSSHServer.RUnlock()
	return calls
}

// StartSharing calls StartSharingFunc.
func (mock *liveshareSessionMock) StartSharing(contextMoqParam context.Context, s string, n int) (liveshare.ChannelID, error) {
	if mock.StartSharingFunc == nil {
		panic("liveshareSessionMock.StartSharingFunc: method is nil but liveshareSession.StartSharing was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		N               int
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		N:               n,
	}
	mock.lockStartSharing.Lock()
	mock.calls.StartSharing = append(mock.calls.StartSharing, callInfo)
	mock.lockStartSharing.Unlock()
	return mock.StartSharingFunc(contextMoqParam, s, n)
}

// StartSharingCalls gets all the calls that were made to StartSharing.
// Check the length with:
//     len(mockedliveshareSession.StartSharingCalls())
func (mock *liveshareSessionMock) StartSharingCalls() []struct {
	ContextMoqParam context.Context
	S               string
	N               int
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		N               int
	}
	mock.lockStartSharing.RLock()
	calls = mock.calls.StartSharing
	mock.lockStartSharing.RUnlock()
	return calls
}
